import './stencil.core';
/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }

  interface HTMLAttributes {}
}

import {
  ButtonElementType,
} from './components/ui-button/types';
import {
  TextElementType,
} from './components/ui-text/types';

import {
  FunctionAsProp as FunctionAsProp
} from './components/function-as-prop/function-as-prop';

declare global {
  interface HTMLFunctionAsPropElement extends FunctionAsProp, HTMLStencilElement {
  }
  var HTMLFunctionAsPropElement: {
    prototype: HTMLFunctionAsPropElement;
    new (): HTMLFunctionAsPropElement;
  };
  interface HTMLElementTagNameMap {
    "function-as-prop": HTMLFunctionAsPropElement;
  }
  interface ElementTagNameMap {
    "function-as-prop": HTMLFunctionAsPropElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "function-as-prop": JSXElements.FunctionAsPropAttributes;
    }
  }
  namespace JSXElements {
    export interface FunctionAsPropAttributes extends HTMLAttributes {
      eventHandler?: Function;
    }
  }
}


import {
  UIArrowBox as UiArrowBox
} from './components/ui-arrow-box/ui-arrow-box';

declare global {
  interface HTMLUiArrowBoxElement extends UiArrowBox, HTMLStencilElement {
  }
  var HTMLUiArrowBoxElement: {
    prototype: HTMLUiArrowBoxElement;
    new (): HTMLUiArrowBoxElement;
  };
  interface HTMLElementTagNameMap {
    "ui-arrow-box": HTMLUiArrowBoxElement;
  }
  interface ElementTagNameMap {
    "ui-arrow-box": HTMLUiArrowBoxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-arrow-box": JSXElements.UiArrowBoxAttributes;
    }
  }
  namespace JSXElements {
    export interface UiArrowBoxAttributes extends HTMLAttributes {
      color?: string;
      padding?: number;
      placement?: string;
    }
  }
}


import {
  UIBadge as UiBadge
} from './components/ui-badge/ui-badge';

declare global {
  interface HTMLUiBadgeElement extends UiBadge, HTMLStencilElement {
  }
  var HTMLUiBadgeElement: {
    prototype: HTMLUiBadgeElement;
    new (): HTMLUiBadgeElement;
  };
  interface HTMLElementTagNameMap {
    "ui-badge": HTMLUiBadgeElement;
  }
  interface ElementTagNameMap {
    "ui-badge": HTMLUiBadgeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-badge": JSXElements.UiBadgeAttributes;
    }
  }
  namespace JSXElements {
    export interface UiBadgeAttributes extends HTMLAttributes {
      color?: string;
      label?: string;
      size?: string;
    }
  }
}


import {
  TruButton as UiButton
} from './components/ui-button/ui-button';

declare global {
  interface HTMLUiButtonElement extends UiButton, HTMLStencilElement {
  }
  var HTMLUiButtonElement: {
    prototype: HTMLUiButtonElement;
    new (): HTMLUiButtonElement;
  };
  interface HTMLElementTagNameMap {
    "ui-button": HTMLUiButtonElement;
  }
  interface ElementTagNameMap {
    "ui-button": HTMLUiButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-button": JSXElements.UiButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface UiButtonAttributes extends HTMLAttributes {
      color?: string;
      href?: string;
      size?: string;
      type?: string;
      usage?: ButtonElementType;
    }
  }
}


import {
  TruCardContent as UiCardContent
} from './components/ui-card/ui-card-content';

declare global {
  interface HTMLUiCardContentElement extends UiCardContent, HTMLStencilElement {
  }
  var HTMLUiCardContentElement: {
    prototype: HTMLUiCardContentElement;
    new (): HTMLUiCardContentElement;
  };
  interface HTMLElementTagNameMap {
    "ui-card-content": HTMLUiCardContentElement;
  }
  interface ElementTagNameMap {
    "ui-card-content": HTMLUiCardContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-card-content": JSXElements.UiCardContentAttributes;
    }
  }
  namespace JSXElements {
    export interface UiCardContentAttributes extends HTMLAttributes {
      padding?: number;
    }
  }
}


import {
  TruCard as UiCard
} from './components/ui-card/ui-card';

declare global {
  interface HTMLUiCardElement extends UiCard, HTMLStencilElement {
  }
  var HTMLUiCardElement: {
    prototype: HTMLUiCardElement;
    new (): HTMLUiCardElement;
  };
  interface HTMLElementTagNameMap {
    "ui-card": HTMLUiCardElement;
  }
  interface ElementTagNameMap {
    "ui-card": HTMLUiCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-card": JSXElements.UiCardAttributes;
    }
  }
  namespace JSXElements {
    export interface UiCardAttributes extends HTMLAttributes {
      elevation?: number;
      interactive?: boolean;
    }
  }
}


import {
  UIDivider as UiDivider
} from './components/ui-divider/ui-divider';

declare global {
  interface HTMLUiDividerElement extends UiDivider, HTMLStencilElement {
  }
  var HTMLUiDividerElement: {
    prototype: HTMLUiDividerElement;
    new (): HTMLUiDividerElement;
  };
  interface HTMLElementTagNameMap {
    "ui-divider": HTMLUiDividerElement;
  }
  interface ElementTagNameMap {
    "ui-divider": HTMLUiDividerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-divider": JSXElements.UiDividerAttributes;
    }
  }
  namespace JSXElements {
    export interface UiDividerAttributes extends HTMLAttributes {
      height?: number;
      label?: string;
      line?: string;
      padding?: number;
    }
  }
}


import {
  UIDropdownItem as UiDropdownItem
} from './components/ui-dropdown/ui-dropdown-item';

declare global {
  interface HTMLUiDropdownItemElement extends UiDropdownItem, HTMLStencilElement {
  }
  var HTMLUiDropdownItemElement: {
    prototype: HTMLUiDropdownItemElement;
    new (): HTMLUiDropdownItemElement;
  };
  interface HTMLElementTagNameMap {
    "ui-dropdown-item": HTMLUiDropdownItemElement;
  }
  interface ElementTagNameMap {
    "ui-dropdown-item": HTMLUiDropdownItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-dropdown-item": JSXElements.UiDropdownItemAttributes;
    }
  }
  namespace JSXElements {
    export interface UiDropdownItemAttributes extends HTMLAttributes {
      tabindex?: number;
    }
  }
}


import {
  UIDropdown as UiDropdown
} from './components/ui-dropdown/ui-drowndown';

declare global {
  interface HTMLUiDropdownElement extends UiDropdown, HTMLStencilElement {
  }
  var HTMLUiDropdownElement: {
    prototype: HTMLUiDropdownElement;
    new (): HTMLUiDropdownElement;
  };
  interface HTMLElementTagNameMap {
    "ui-dropdown": HTMLUiDropdownElement;
  }
  interface ElementTagNameMap {
    "ui-dropdown": HTMLUiDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-dropdown": JSXElements.UiDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface UiDropdownAttributes extends HTMLAttributes {
      label?: string;
      line?: string;
      padding?: number;
    }
  }
}


import {
  UIGrid as UiGridItem
} from './components/ui-grid/ui-grid-item';

declare global {
  interface HTMLUiGridItemElement extends UiGridItem, HTMLStencilElement {
  }
  var HTMLUiGridItemElement: {
    prototype: HTMLUiGridItemElement;
    new (): HTMLUiGridItemElement;
  };
  interface HTMLElementTagNameMap {
    "ui-grid-item": HTMLUiGridItemElement;
  }
  interface ElementTagNameMap {
    "ui-grid-item": HTMLUiGridItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-grid-item": JSXElements.UiGridItemAttributes;
    }
  }
  namespace JSXElements {
    export interface UiGridItemAttributes extends HTMLAttributes {
      gutter?: number;
      padding?: number;
    }
  }
}


import {
  UIGrid as UiGrid
} from './components/ui-grid/ui-grid';

declare global {
  interface HTMLUiGridElement extends UiGrid, HTMLStencilElement {
  }
  var HTMLUiGridElement: {
    prototype: HTMLUiGridElement;
    new (): HTMLUiGridElement;
  };
  interface HTMLElementTagNameMap {
    "ui-grid": HTMLUiGridElement;
  }
  interface ElementTagNameMap {
    "ui-grid": HTMLUiGridElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-grid": JSXElements.UiGridAttributes;
    }
  }
  namespace JSXElements {
    export interface UiGridAttributes extends HTMLAttributes {
      cols?: number;
      gutter?: number;
      padding?: number;
      testing?: boolean;
      wrap?: boolean;
    }
  }
}


import {
  UIReset as UiInit
} from './components/ui-init/ui-init';

declare global {
  interface HTMLUiInitElement extends UiInit, HTMLStencilElement {
  }
  var HTMLUiInitElement: {
    prototype: HTMLUiInitElement;
    new (): HTMLUiInitElement;
  };
  interface HTMLElementTagNameMap {
    "ui-init": HTMLUiInitElement;
  }
  interface ElementTagNameMap {
    "ui-init": HTMLUiInitElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-init": JSXElements.UiInitAttributes;
    }
  }
  namespace JSXElements {
    export interface UiInitAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  UIInput as UiInput
} from './components/ui-input/ui-input';

declare global {
  interface HTMLUiInputElement extends UiInput, HTMLStencilElement {
  }
  var HTMLUiInputElement: {
    prototype: HTMLUiInputElement;
    new (): HTMLUiInputElement;
  };
  interface HTMLElementTagNameMap {
    "ui-input": HTMLUiInputElement;
  }
  interface ElementTagNameMap {
    "ui-input": HTMLUiInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-input": JSXElements.UiInputAttributes;
    }
  }
  namespace JSXElements {
    export interface UiInputAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  UIListItem as UiListItem
} from './components/ui-list/ui-list-item';

declare global {
  interface HTMLUiListItemElement extends UiListItem, HTMLStencilElement {
  }
  var HTMLUiListItemElement: {
    prototype: HTMLUiListItemElement;
    new (): HTMLUiListItemElement;
  };
  interface HTMLElementTagNameMap {
    "ui-list-item": HTMLUiListItemElement;
  }
  interface ElementTagNameMap {
    "ui-list-item": HTMLUiListItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-list-item": JSXElements.UiListItemAttributes;
    }
  }
  namespace JSXElements {
    export interface UiListItemAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  UIList as UiList
} from './components/ui-list/ui-list';

declare global {
  interface HTMLUiListElement extends UiList, HTMLStencilElement {
  }
  var HTMLUiListElement: {
    prototype: HTMLUiListElement;
    new (): HTMLUiListElement;
  };
  interface HTMLElementTagNameMap {
    "ui-list": HTMLUiListElement;
  }
  interface ElementTagNameMap {
    "ui-list": HTMLUiListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-list": JSXElements.UiListAttributes;
    }
  }
  namespace JSXElements {
    export interface UiListAttributes extends HTMLAttributes {
      comps?: any;
      elevation?: number;
      interactive?: boolean;
    }
  }
}


import {
  UIPopover as UiPopover
} from './components/ui-popover/ui-popover';

declare global {
  interface HTMLUiPopoverElement extends UiPopover, HTMLStencilElement {
  }
  var HTMLUiPopoverElement: {
    prototype: HTMLUiPopoverElement;
    new (): HTMLUiPopoverElement;
  };
  interface HTMLElementTagNameMap {
    "ui-popover": HTMLUiPopoverElement;
  }
  interface ElementTagNameMap {
    "ui-popover": HTMLUiPopoverElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-popover": JSXElements.UiPopoverAttributes;
    }
  }
  namespace JSXElements {
    export interface UiPopoverAttributes extends HTMLAttributes {
      placement?: string;
      trigger?: string;
    }
  }
}


import {
  TruText as UiText
} from './components/ui-text/ui-text';

declare global {
  interface HTMLUiTextElement extends UiText, HTMLStencilElement {
  }
  var HTMLUiTextElement: {
    prototype: HTMLUiTextElement;
    new (): HTMLUiTextElement;
  };
  interface HTMLElementTagNameMap {
    "ui-text": HTMLUiTextElement;
  }
  interface ElementTagNameMap {
    "ui-text": HTMLUiTextElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-text": JSXElements.UiTextAttributes;
    }
  }
  namespace JSXElements {
    export interface UiTextAttributes extends HTMLAttributes {
      clickable?: boolean;
      color?: string;
      href?: string;
      spacing?: string;
      transform?: string;
      type?: TextElementType;
      weight?: string;
    }
  }
}


import {
  UIArrow as UiArrow
} from './components/ui-tooltip/ui-arrow';

declare global {
  interface HTMLUiArrowElement extends UiArrow, HTMLStencilElement {
  }
  var HTMLUiArrowElement: {
    prototype: HTMLUiArrowElement;
    new (): HTMLUiArrowElement;
  };
  interface HTMLElementTagNameMap {
    "ui-arrow": HTMLUiArrowElement;
  }
  interface ElementTagNameMap {
    "ui-arrow": HTMLUiArrowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-arrow": JSXElements.UiArrowAttributes;
    }
  }
  namespace JSXElements {
    export interface UiArrowAttributes extends HTMLAttributes {
      color?: string;
      direction?: string;
      placement?: string;
    }
  }
}


import {
  UITooltip as UiTooltip
} from './components/ui-tooltip/ui-tooltip';

declare global {
  interface HTMLUiTooltipElement extends UiTooltip, HTMLStencilElement {
  }
  var HTMLUiTooltipElement: {
    prototype: HTMLUiTooltipElement;
    new (): HTMLUiTooltipElement;
  };
  interface HTMLElementTagNameMap {
    "ui-tooltip": HTMLUiTooltipElement;
  }
  interface ElementTagNameMap {
    "ui-tooltip": HTMLUiTooltipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ui-tooltip": JSXElements.UiTooltipAttributes;
    }
  }
  namespace JSXElements {
    export interface UiTooltipAttributes extends HTMLAttributes {
      placement?: any;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
